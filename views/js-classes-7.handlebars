<h2 class="page-header">Privacy, Please!</h2>
<p>A quick recap: So far we've seen how to make objects from a constructor using properties, configure the attributes on those properties, assign methods to their prototypes, and inherit from other objects to create Prototype Chaining to inherit behavior and steal data members from superclass constructors - aka, Prototypal Inheritance.</p>

<p>Let's now turn our attention to something I promised at the outset: Private data variables and methods vs. Public Methods and Properties. If you've studied JavaScript closures and Immediately Invoked Function Expressions, this should feel welcome and intuitive (peraps even self-evident!) to you. If not, I suggest some reading to get up to speed with the concepts.</p>

<p>Let's start with an example. Note that there is a similar pattern for a singleton object (The module pattern and the "revealing" module pattern). I'm going to focus on the constructor/class-like pattern. Let's make our 'privatize' our creature class from before. The key concept with this pattern is that we first define some private variables. We're going to modify some of our design decisions a bit here, too. If we want private data accessible through a public method, we have to store the related functions on the object itself, rather than on the prototype. </p>

<pre class="prettyprint linenums">
function Creature(name, str) {
  var strength  = str || 100;   // this will be captured inside our closure
  this.name = name || "Unnamed";
  
  this.getStrength = function() {
    return strength;
  };
  
  this.levelUp = function() {
    strength += 10;
  };

  this.printInfo = function() {
    console.log("Name: " + this.name +", Strength: " + getStrength());
  }
}

// Our "superclass"
Creature.prototype = {
  constructor: Creature,  

  // This is okay, name is not private.
  battleCry: function() {
    console.log(this.name + " will crush you!");
  }
};

// Subclass of Creature
function Furry(name, strength) {
  // call superclass constructor to 'steal' the public methods and data members
  Creature.call(this, name, strength); 
}

// Here's the prototypal inheritance
Furry.prototype = new Creature();   
Furry.prototype.constructor = Furry; 

Furry.prototype.shed = function() {
  console.log(this.name + " sheds all over the floor. Ew!");
}

var ogre = new Creature("Shrek");
ogre.name = "Bob"; // Doesn't work!
console.log(ogre.getStrength()); // 100
ogre.levelUp();
ogre.printInfo(); // "Name: Shrek, Strength: 110"
</pre>

<p>Whew. Nothing crazy here. The biggest thing to note is that we declare stength as a variable, instead of contextually applying it as a property that's attached to the local this parameter inside of Creature. What does that mean? Well, normally strength would fall out of scope. But because of closure, Creature can still see the strength variable. And the functions on it can likewise see it. This is just good old closure being applied for our purposes. </p>

<p>Continue reading to get an overview of other options for class-related design in JavaScript</p>
