<h1>Introduction</h1>
<p>This is a guide that demonstrates how to leverage closures and other mechanics to create an approximation to classical object-oriented design, classes, and inheritance. We first will examine the motivation behind doing so in a language that does not actually support our traditional concept of classes. Then we will step through increasingly more complex class-like structures as they are implemented in JavaScript until we have a situation which can be described as "pseudo-classical inheritance". As we do so, our goal will be to create a class hierarchy which demonstrates these techniques that we can run in a node.js environment..</p>
<h2>Requirements</h2>
<p>In order to follow along with this guide, you will need an understanding of JavaScript syntax, closures, and variable scope. The intent of this guide is not to review these concepts, but closures are integral to how we will implement classes with public and private getters and setters. Therefore, some coverage of that will occur.</p>
<p>In addition, you will need node.js installed in your work environment to run the scripts that we create. This guide was written with Windows 7 and a virtual machine with the latest distribution of Ubunutu installed. To run the samples in windows, launch the node.js terminal that comes installed with the node.js distribution package. In Linux, you should be able to simply open a terminal of your choice. In either case, navigate to your working directory and follow along.</p>
<p>Finally, I assume familiarity with using git at the command line, but it is in no way required to follow along</p>
<h2>Contributions and Inspirations</h2>
<p>Finally, before we begin, please let me know if you would like to make a contribution to this guide. Whether you've identified a syntax error that was transcribed into the source code or simply want to improve the grammar or stucture of this guide, I welcome such criticism.</p>
<p>This guide would not be possible without the <cite>The Principles of Object-Oriented JavaScript</cite> by Nicholas C. Zakas. If you are at all interested in learning more about this topic, I highly recommend the textbook. At around 70 pages in length, it is dense with material on a focused subset of the language.</p>
<p>I recommend following the guide in the order its presented - continue.</p>